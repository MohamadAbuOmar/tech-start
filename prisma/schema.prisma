generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id             Int      @id @default(autoincrement())
  slug           String   @unique
  type           String
  title_en       String
  title_ar       String
  description_en String?
  description_ar String?
  content_en     String
  content_ar     String
  imageUrl       String?
  readTime       String?
  published      Boolean  @default(false)
  featured       Boolean  @default(false)
  authorId       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tags           Tag[]    @relation("PostToTag")
}

model Tag {
  id      Int    @id @default(autoincrement())
  slug    String @unique
  name_ar String
  name_en String
  posts   Post[] @relation("PostToTag")
}

model Gallery {
  id        String   @id @default(cuid())
  title_en  String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  images    Image[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  title_en  String?
  title_ar  String?
  createdAt DateTime @default(now())
  galleryId String
  featured  Boolean  @default(false)
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
}

model VideoGallery {
  id        String   @id @default(cuid())
  title_en  String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  videos    Video[]
}

model Video {
  id             String       @id @default(cuid())
  url            String
  title_en       String
  title_ar       String
  description_en String?
  description_ar String?
  createdAt      DateTime     @default(now())
  galleryId      String
  type           String       @default("local")
  gallery        VideoGallery @relation(fields: [galleryId], references: [id])
}

model HeroStep {
  id             Int      @id @default(autoincrement())
  title_en       String
  title_ar       String
  tagline_en     String
  tagline_ar     String
  description_en String
  description_ar String
  color          String
  imageUrl       String
  order          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([order])
}

model Stat {
  id      String @id @default(cuid())
  name_en String
  name_ar String
  value   Int
  icon    String
}

enum ProgramType {
  PIONEER
  UPSKILL
}

model Program {
  id                String     @id @default(cuid())
  type              ProgramType
  name_en           String
  name_ar           String
  description_en    String
  description_ar    String
  imageUrl          String
  nameColor         String     @default("#1b316e")
  descColor         String     @default("#862996")
  order             Int        @default(0)
  // Hero section
  badge_en          String
  badge_ar          String
  heroTitle_en      String
  heroTitle_ar      String
  heroDesc_en       String
  heroDesc_ar       String
  heroImage         String
  // Tab content
  overview_en       String
  overview_ar       String
  features          Json?      // Array of features with bilingual content
  // FAQ section
  faqs             ProgramFaq[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())

  @@index([type])
  @@index([order])
}

model ProgramFaq {
  id          String   @id @default(cuid())
  programId   String
  question_en String
  question_ar String
  answer_en   String
  answer_ar   String
  order       Int      @default(0)
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@index([order])
}

model Footer {
  id                String    @id @default(cuid())
  techStartTitle_en String    @default("TechStart")
  techStartTitle_ar String    @default("تك ستارت")
  titleColor        String    @default("#1b316e")
  gradientColor     String    @default("#862996")
  instagram         String?
  linkedin          String?
  facebook          String?
  youtube           String?
  twitter           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  partners          Partner[]
}

model Partner {
  id        String      @id @default(cuid())
  type      PartnerType
  imageUrl  String
  name_en   String
  name_ar   String
  order     Int         @default(0)
  footerId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  footer    Footer      @relation(fields: [footerId], references: [id])

  @@index([order])
}

model Beneficiary {
  id                 String   @id @default(cuid())
  title_en           String
  title_ar           String
  description_en     String
  description_ar     String
  longDescription_en String
  longDescription_ar String
  imageUrl           String
  ctaText            String
  ctaLink            String
  categoryId         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  category           Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id            String        @id @default(cuid())
  name_en       String
  name_ar       String
  slug          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  beneficiaries Beneficiary[]
}

model AboutUs {
  id            String     @id @default(cuid())
  titleEn       String
  titleAr       String
  descriptionEn String
  descriptionAr String
  imageUrl      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cards         Card[]
  whoWeAre      WhoWeAre[]
}

model Card {
  id            String  @id @default(cuid())
  titleEn       String
  titleAr       String
  descriptionEn String
  descriptionAr String
  icon          String
  aboutUsId     String
  aboutUs       AboutUs @relation(fields: [aboutUsId], references: [id], onDelete: Cascade)
}

model WhoWeAre {
  id            String  @id @default(cuid())
  titleEn       String
  titleAr       String
  descriptionEn String
  descriptionAr String
  aboutUsId     String
  aboutUs       AboutUs @relation(fields: [aboutUsId], references: [id], onDelete: Cascade)
}

model Focusarea {
  id            String          @id @default(cuid())
  titleEn       String
  titleAr       String
  descriptionEn String
  descriptionAr String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  cards         FocusareaCard[]
}

model FocusareaCard {
  id            String    @id @default(cuid())
  titleEn       String
  titleAr       String
  descriptionEn String
  descriptionAr String
  imageUrl      String
  focusareaId   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  focusarea     Focusarea @relation(fields: [focusareaId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id            String   @id @default(cuid())
  nameEn        String
  nameAr        String
  jobTitleEn    String
  jobTitleAr    String
  descriptionEn String
  descriptionAr String
  imageUrl      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model WorkWithUs {
  id            String   @id @default(cuid())
  type          WorkType
  titleEn       String
  titleAr       String
  iconName      String
  descriptionEn String
  descriptionAr String
  tags          String
  deadline      DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Complaint {
  id                      String                @id @default(cuid())
  complaintNumber         String                @unique
  type                    String
  status                  String                @default("PENDING")
  submittedAt             DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  complainantType         String?
  complainantName         String?
  complainantGender       String?
  complainantEmail        String?
  complainantPhone        String?
  firmName                String?
  firmEmail               String?
  firmPhone               String?
  description             String
  entityAgainst           String
  filedInCourt            Boolean
  hasPreviousComplaint    Boolean
  previousComplaintEntity String?
  previousComplaintDate   DateTime?
  facts                   String
  confirmed               Boolean
  attachments             ComplaintAttachment[]
  notes                   ComplaintNote[]
}

model ComplaintAttachment {
  id          String    @id @default(cuid())
  complaintId String
  fileUrl     String
  fileName    String
  fileType    String
  fileSize    Int
  uploadedAt  DateTime  @default(now())
  complaint   Complaint @relation(fields: [complaintId], references: [id])

  @@index([complaintId])
}

model ComplaintNote {
  id          String    @id @default(cuid())
  complaintId String
  authorName  String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@index([complaintId])
}

model Safeguard {
  id                 String   @id @default(cuid())
  domain             String
  title_en           String
  title_ar           String
  tagline_en         String
  tagline_ar         String
  description_en     String
  description_ar     String
  longDescription_en String?
  longDescription_ar String?
  bgColor            String
  attachmentUrl      String?
  imageUrl           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("safeguards")
}

model FaqCategory {
  id        String    @id @default(cuid())
  nameEn    String
  nameAr    String
  slug      String    @unique
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  faqs      FaqItem[]

  @@index([slug])
  @@index([order])
}

model FaqItem {
  id         String      @id @default(cuid())
  questionEn String
  questionAr String
  answerEn   String
  answerAr   String
  order      Int         @default(0)
  categoryId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  category   FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([order])
}

enum PartnerType {
  PROJECT_OF
  FUNDED_BY
  IMPLEMENTED_BY
}

enum WorkType {
  Procurement
  Recruitment
}

enum ComplaintType {
  REGULAR
  ANONYMOUS
}

enum ComplaintStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  REJECTED
}
